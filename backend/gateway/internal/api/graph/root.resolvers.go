package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"gateway/internal/api/graph/model"
	"gateway/internal/models"

	"github.com/sirupsen/logrus"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	logrus.Info("mutationResolver.CreateUser(ctx, input model.NewUser) called")

	newUser := mapDTOUserToModelUser(input)
	createdUser, err := r.userService.Create(ctx, &newUser)
	return mapModelUserToDTOUser(createdUser), err
}

func mapModelUserToDTOUser(createdUser *models.User) *model.User {
	return &model.User{
		ID:    fmt.Sprintf("%d", createdUser.ID),
		Name:  createdUser.Name,
		Email: createdUser.Email,
	}
}

func mapDTOUserToModelUser(createUserRequest model.NewUser) models.User {
	return models.User{
		Name:  createUserRequest.Name,
		Email: createUserRequest.Email,
	}
}

// GetAllUsers is the resolver for the GetAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetAllUsers - GetAllUsers"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
