// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcAuthServiceProtocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GrpcAuthServiceProtocolClient is the client API for GrpcAuthServiceProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcAuthServiceProtocolClient interface {
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	Register(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error)
	Verify(ctx context.Context, in *TokenVerifyRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error)
}

type grpcAuthServiceProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcAuthServiceProtocolClient(cc grpc.ClientConnInterface) GrpcAuthServiceProtocolClient {
	return &grpcAuthServiceProtocolClient{cc}
}

func (c *grpcAuthServiceProtocolClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcAuthServiceProtocolClient) Register(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error) {
	out := new(UserRegistrationResponse)
	err := c.cc.Invoke(ctx, "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcAuthServiceProtocolClient) Verify(ctx context.Context, in *TokenVerifyRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error) {
	out := new(TokenVerifyResponse)
	err := c.cc.Invoke(ctx, "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcAuthServiceProtocolServer is the server API for GrpcAuthServiceProtocol service.
// All implementations must embed UnimplementedGrpcAuthServiceProtocolServer
// for forward compatibility
type GrpcAuthServiceProtocolServer interface {
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Register(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error)
	Verify(context.Context, *TokenVerifyRequest) (*TokenVerifyResponse, error)
	mustEmbedUnimplementedGrpcAuthServiceProtocolServer()
}

// UnimplementedGrpcAuthServiceProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcAuthServiceProtocolServer struct {
}

func (UnimplementedGrpcAuthServiceProtocolServer) Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGrpcAuthServiceProtocolServer) Register(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGrpcAuthServiceProtocolServer) Verify(context.Context, *TokenVerifyRequest) (*TokenVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedGrpcAuthServiceProtocolServer) mustEmbedUnimplementedGrpcAuthServiceProtocolServer() {
}

// UnsafeGrpcAuthServiceProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcAuthServiceProtocolServer will
// result in compilation errors.
type UnsafeGrpcAuthServiceProtocolServer interface {
	mustEmbedUnimplementedGrpcAuthServiceProtocolServer()
}

func RegisterGrpcAuthServiceProtocolServer(s *grpc.Server, srv GrpcAuthServiceProtocolServer) {
	s.RegisterService(&_GrpcAuthServiceProtocol_serviceDesc, srv)
}

func _GrpcAuthServiceProtocol_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAuthServiceProtocolServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAuthServiceProtocolServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcAuthServiceProtocol_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAuthServiceProtocolServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAuthServiceProtocolServer).Register(ctx, req.(*UserRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcAuthServiceProtocol_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAuthServiceProtocolServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcAuthServiceProtocol.grpcAuthServiceProtocol/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAuthServiceProtocolServer).Verify(ctx, req.(*TokenVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcAuthServiceProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcAuthServiceProtocol.grpcAuthServiceProtocol",
	HandlerType: (*GrpcAuthServiceProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _GrpcAuthServiceProtocol_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _GrpcAuthServiceProtocol_Register_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _GrpcAuthServiceProtocol_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
